// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// User account tables for next-auth
// Accounts represent OAuth connections to a provider
// One user can have several connected accounts
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// Sessions are used to authenticate users and keep them logged in
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// User model with email, name, image and role - owned by the Greg application
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  memberOf GuildMember[]
}

model Guild {
  id        String @id @default(cuid())
  discordId String @unique

  members  GuildMember[]
  missions Mission[]

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/data-transformers
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model GuildMember {
  id      String  @id @default(cuid())
  guildId String
  userId  String
  isOwner Boolean

  guild         Guild         @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  participantOf Participant[]
  creatorOf     Mission[]

  @@index([guildId])
  @@index([userId])
}

model Mission {
  id          String  @id @default(cuid())
  name        String
  guildId     String
  creatorId   String
  description String?

  guild        Guild         @relation(fields: [guildId], references: [id], onDelete: Cascade)
  creator      GuildMember   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  participants Participant[]
  roles        MissionRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([guildId])
  @@index([creatorId])
}

model Participant {
  id String @id @default(cuid())

  missionId     String
  guildMemberId String?

  mission     Mission      @relation(fields: [missionId], references: [id], onDelete: Cascade)
  guildMember GuildMember? @relation(fields: [guildMemberId], references: [id])

  @@index([missionId])
  @@index([guildMemberId])
}

model MissionRole {
  id          String @id @default(cuid())
  name        String
  description String

  missionId String

  mission Mission @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@index([missionId])
}
